import platform
import subprocess
import os

import pyttsx3


class ComplexTextToSpeech:
    from TTS.api import TTS
    """
    This class uses the TTS library to generate a wav file from a text.
    It produces a better quality than the SimpleTextToSpeech class, but it is 
    not in real time, instead it generates a file that can be played later.
    """
    def __init__(self):
        self.model_name = TTS.list_models()[0]
        # Init TTS
        self.tts = TTS(self.model_name)
        self.speakers = self.tts.speakers[0]
        self.languages = self.tts.languages[0]
        
        # String to be spoken
        self.alarm_dict = {
            "drowsy": "I have detected drowsiness, please pull over the car.",
            "look_away": "I have detected that you are looking away from the road, please look at the road.",
            "loud": "I have detected too much noise, please turn down the radio volume",
            "phone": "I have detected that you are using your phone, please stop using it.",
            "radio": "I have detected that you are using the radio, please stop using it.",
            "drink": "I have detected that you are drinking, please stop drinking.",
            "reach": "I have detected that you are reaching for something, please stop reaching for it.",
            "hair": "I have detected that you are fixing your hair or your makeup, please stop fixing your hair.",
            "talk": "I have detected that you are talking to someone, please stop talking.",
        }
        self.path = "/src/data/audio/tts/"
        

    def create_file(self):
        """
        Create a wav file from a text.
        """
        for alarm in self.alarm_dict:
            path = self.path + alarm + ".wav"
            
            self.tts.tts_to_file(
                self.alarm_dict[alarm],
                speaker=self.speakers, 
                language=self.languages,
                #emotion="Happy", 
                path=path
            )
    
    def speak(self, alarm):
        """
        Play the wav file generated by the create_file method.

        Args:
            path (str): path to the wav file.
        """
        if alarm not in self.alarm_dict:
            raise ValueError("The alarm name does not exist.")
        file_path = self.path + alarm + ".wav"
        os.system(file_path)

class SimpleTextToSpeech:
    """
    Produce a real time speech from a text, but the quality is not as good as
    ComplexTextToSpeech class.
    """
    def __init__(self):
        # Using pyttsx3
        self.engine = pyttsx3.init() 
        self.engine.setProperty('rate', 125)     # setting up new voice rate
        self.engine.setProperty('volume', 1.0)
        
        # Set voices: 0 Male, 1 Female
        self.voices = self.engine.getProperty('voices')
        self.engine.setProperty('voice', self.voices[1].id)
    
    def speak(self, text):
        operating_system = platform.system()
        if operating_system == 'Windows':
            subprocess.call(['PowerShell', '-Command', f'(New-Object -ComObject SAPI.SpVoice).Speak("{text}")'])
        elif operating_system == 'Darwin':  # MacOS
            subprocess.call(['say', text])
        elif operating_system == 'Linux':
            subprocess.call(['espeak', text])
        
        # Using pyttsx3, we can modify the voice rate and volume.
        # This library use the same engine (espeak) as the Linux command.
        # pyttsx3.speak(text)
    


if __name__ == "__main__":
    # tts = ComplexTextToSpeech()
    # tts.create_file()
    # tts.speak("drowsy")
    
    tts = SimpleTextToSpeech()
    tts.speak("Hello, this is just a test")
    
    # With gTTS
    # speak("Hello, this is just a test")